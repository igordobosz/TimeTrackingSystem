/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuthorizationService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44380";
    }

    get(): Observable<User[]> {
        let url_ = this.baseUrl + "/api/Login/Users";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<User[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<User[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<User[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(User.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User[]>(<any>null);
    }

    login(loginDto: LoginDTO): Observable<LoginResponse> {
        let url_ = this.baseUrl + "/api/Login/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(loginDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<LoginResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<LoginResponse>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResponse>(<any>null);
    }
}

@Injectable()
export class EmployeeService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44380";
    }

    filterEmployeeAutoComplete(filter: string | null | undefined): Observable<EmployeeViewModel[]> {
        let url_ = this.baseUrl + "/api/Employee/FilterEmployeeAutoComplete?";
        if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFilterEmployeeAutoComplete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilterEmployeeAutoComplete(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processFilterEmployeeAutoComplete(response: HttpResponseBase): Observable<EmployeeViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeViewModel[]>(<any>null);
    }

    list(pageIndex: number | undefined, pageSize: number | undefined, searchExpression: string | null | undefined, sortColumn: string | null | undefined, sortOrder: string | null | undefined): Observable<FindByConditionResponseOfEmployeeViewModel> {
        let url_ = this.baseUrl + "/api/Employee/List?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (searchExpression !== undefined)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&"; 
        if (sortColumn !== undefined)
            url_ += "sortColumn=" + encodeURIComponent("" + sortColumn) + "&"; 
        if (sortOrder !== undefined)
            url_ += "sortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<FindByConditionResponseOfEmployeeViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<FindByConditionResponseOfEmployeeViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<FindByConditionResponseOfEmployeeViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindByConditionResponseOfEmployeeViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FindByConditionResponseOfEmployeeViewModel>(<any>null);
    }

    getByID(id: number | undefined): Observable<EmployeeViewModel> {
        let url_ = this.baseUrl + "/api/Employee/GetByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByID(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetByID(response: HttpResponseBase): Observable<EmployeeViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeViewModel>(<any>null);
    }

    insert(item: EmployeeViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/Employee/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    update(item: EmployeeViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/Employee/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    delete(id: number | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/Employee/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }
}

@Injectable()
export class EmployeeGroupService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44380";
    }

    listCbx(): Observable<EmployeeGroupCbxViewModel[]> {
        let url_ = this.baseUrl + "/api/EmployeeGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListCbx(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListCbx(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeGroupCbxViewModel[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeGroupCbxViewModel[]>><any>_observableThrow(response_);
        }));
    }

    protected processListCbx(response: HttpResponseBase): Observable<EmployeeGroupCbxViewModel[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmployeeGroupCbxViewModel.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeGroupCbxViewModel[]>(<any>null);
    }

    list(pageIndex: number | undefined, pageSize: number | undefined, searchExpression: string | null | undefined, sortColumn: string | null | undefined, sortOrder: string | null | undefined): Observable<FindByConditionResponseOfEmployeeGroupViewModel> {
        let url_ = this.baseUrl + "/api/EmployeeGroup/List?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (searchExpression !== undefined)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&"; 
        if (sortColumn !== undefined)
            url_ += "sortColumn=" + encodeURIComponent("" + sortColumn) + "&"; 
        if (sortOrder !== undefined)
            url_ += "sortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<FindByConditionResponseOfEmployeeGroupViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<FindByConditionResponseOfEmployeeGroupViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<FindByConditionResponseOfEmployeeGroupViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindByConditionResponseOfEmployeeGroupViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FindByConditionResponseOfEmployeeGroupViewModel>(<any>null);
    }

    getByID(id: number | undefined): Observable<EmployeeGroupViewModel> {
        let url_ = this.baseUrl + "/api/EmployeeGroup/GetByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByID(<any>response_);
                } catch (e) {
                    return <Observable<EmployeeGroupViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<EmployeeGroupViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetByID(response: HttpResponseBase): Observable<EmployeeGroupViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EmployeeGroupViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EmployeeGroupViewModel>(<any>null);
    }

    insert(item: EmployeeGroupViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/EmployeeGroup/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    update(item: EmployeeGroupViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/EmployeeGroup/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    delete(id: number | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/EmployeeGroup/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }
}

@Injectable()
export class RegisterTimeEndpointService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44380";
    }

    generateToken(id: number | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/GenerateToken?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateToken(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processGenerateToken(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    validateEndpoint(name: string | null | undefined, securityToken: string | null | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/ValidateEndpoint?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&"; 
        if (securityToken !== undefined)
            url_ += "securityToken=" + encodeURIComponent("" + securityToken) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processValidateEndpoint(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processValidateEndpoint(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processValidateEndpoint(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    registerTime(id: number | undefined, identityCode: string | null | undefined): Observable<RegisterTimeResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/RegisterTime?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        if (identityCode !== undefined)
            url_ += "identityCode=" + encodeURIComponent("" + identityCode) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterTime(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterTime(<any>response_);
                } catch (e) {
                    return <Observable<RegisterTimeResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterTimeResponse>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterTime(response: HttpResponseBase): Observable<RegisterTimeResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterTimeResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterTimeResponse>(<any>null);
    }

    list(pageIndex: number | undefined, pageSize: number | undefined, searchExpression: string | null | undefined, sortColumn: string | null | undefined, sortOrder: string | null | undefined): Observable<FindByConditionResponseOfRegisterTimeEndpointViewModel> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/List?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (searchExpression !== undefined)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&"; 
        if (sortColumn !== undefined)
            url_ += "sortColumn=" + encodeURIComponent("" + sortColumn) + "&"; 
        if (sortOrder !== undefined)
            url_ += "sortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<FindByConditionResponseOfRegisterTimeEndpointViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<FindByConditionResponseOfRegisterTimeEndpointViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<FindByConditionResponseOfRegisterTimeEndpointViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindByConditionResponseOfRegisterTimeEndpointViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FindByConditionResponseOfRegisterTimeEndpointViewModel>(<any>null);
    }

    getByID(id: number | undefined): Observable<RegisterTimeEndpointViewModel> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/GetByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByID(<any>response_);
                } catch (e) {
                    return <Observable<RegisterTimeEndpointViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterTimeEndpointViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetByID(response: HttpResponseBase): Observable<RegisterTimeEndpointViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterTimeEndpointViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterTimeEndpointViewModel>(<any>null);
    }

    insert(item: RegisterTimeEndpointViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    update(item: RegisterTimeEndpointViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    delete(id: number | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/RegisterTimeEndpoint/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }
}

@Injectable()
export class WorkRegisterEventService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "https://localhost:44380";
    }

    getWorkEventsByEmployeeAndDate(employeeID: number | undefined, date: Date | undefined): Observable<RegisterTimePerEmployeeViewModel> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/GetWorkEventsByEmployeeAndDate?";
        if (employeeID === null)
            throw new Error("The parameter 'employeeID' cannot be null.");
        else if (employeeID !== undefined)
            url_ += "employeeID=" + encodeURIComponent("" + employeeID) + "&"; 
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkEventsByEmployeeAndDate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkEventsByEmployeeAndDate(<any>response_);
                } catch (e) {
                    return <Observable<RegisterTimePerEmployeeViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterTimePerEmployeeViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkEventsByEmployeeAndDate(response: HttpResponseBase): Observable<RegisterTimePerEmployeeViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterTimePerEmployeeViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterTimePerEmployeeViewModel>(<any>null);
    }

    getWorkEventsByDay(date: Date | undefined): Observable<RegisterTimePerDayViewModel> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/GetWorkEventsByDay?";
        if (date === null)
            throw new Error("The parameter 'date' cannot be null.");
        else if (date !== undefined)
            url_ += "date=" + encodeURIComponent(date ? "" + date.toJSON() : "") + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkEventsByDay(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkEventsByDay(<any>response_);
                } catch (e) {
                    return <Observable<RegisterTimePerDayViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<RegisterTimePerDayViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkEventsByDay(response: HttpResponseBase): Observable<RegisterTimePerDayViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterTimePerDayViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegisterTimePerDayViewModel>(<any>null);
    }

    list(pageIndex: number | undefined, pageSize: number | undefined, searchExpression: string | null | undefined, sortColumn: string | null | undefined, sortOrder: string | null | undefined): Observable<FindByConditionResponseOfWorkRegisterEventViewModel> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/List?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "pageIndex=" + encodeURIComponent("" + pageIndex) + "&"; 
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&"; 
        if (searchExpression !== undefined)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&"; 
        if (sortColumn !== undefined)
            url_ += "sortColumn=" + encodeURIComponent("" + sortColumn) + "&"; 
        if (sortOrder !== undefined)
            url_ += "sortOrder=" + encodeURIComponent("" + sortOrder) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<FindByConditionResponseOfWorkRegisterEventViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<FindByConditionResponseOfWorkRegisterEventViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<FindByConditionResponseOfWorkRegisterEventViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FindByConditionResponseOfWorkRegisterEventViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FindByConditionResponseOfWorkRegisterEventViewModel>(<any>null);
    }

    getByID(id: number | undefined): Observable<WorkRegisterEventViewModel> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/GetByID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByID(<any>response_);
                } catch (e) {
                    return <Observable<WorkRegisterEventViewModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkRegisterEventViewModel>><any>_observableThrow(response_);
        }));
    }

    protected processGetByID(response: HttpResponseBase): Observable<WorkRegisterEventViewModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkRegisterEventViewModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkRegisterEventViewModel>(<any>null);
    }

    insert(item: WorkRegisterEventViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/Insert";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsert(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsert(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processInsert(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    update(item: WorkRegisterEventViewModel): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(item);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }

    delete(id: number | undefined): Observable<CrudResponse> {
        let url_ = this.baseUrl + "/api/WorkRegisterEvent/Delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<CrudResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<CrudResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<CrudResponse> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CrudResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CrudResponse>(<any>null);
    }
}

export class User implements IUser {
    id!: number;
    userName?: string | null;
    email?: string | null;
    password?: string | null;
    token?: string | null;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.userName = data["userName"] !== undefined ? data["userName"] : <any>null;
            this.email = data["email"] !== undefined ? data["email"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data; 
    }
}

export interface IUser {
    id: number;
    userName?: string | null;
    email?: string | null;
    password?: string | null;
    token?: string | null;
}

export class LoginResponse implements ILoginResponse {
    success!: boolean;
    token?: string | null;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            this.token = data["token"] !== undefined ? data["token"] : <any>null;
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["token"] = this.token !== undefined ? this.token : <any>null;
        return data; 
    }
}

export interface ILoginResponse {
    success: boolean;
    token?: string | null;
}

export class LoginDTO implements ILoginDTO {
    username!: string;
    password!: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.username = data["username"] !== undefined ? data["username"] : <any>null;
            this.password = data["password"] !== undefined ? data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data; 
    }
}

export interface ILoginDTO {
    username: string;
    password: string;
}

export abstract class ViewModel implements IViewModel {
    id!: number;

    constructor(data?: IViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): ViewModel {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ViewModel' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface IViewModel {
    id: number;
}

export class EmployeeViewModel extends ViewModel implements IEmployeeViewModel {
    employeeGroupID?: number | null;
    name!: string;
    surename!: string;
    identityCode?: string | null;
    employeeGroupName?: string | null;

    constructor(data?: IEmployeeViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.employeeGroupID = data["employeeGroupID"] !== undefined ? data["employeeGroupID"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.surename = data["surename"] !== undefined ? data["surename"] : <any>null;
            this.identityCode = data["identityCode"] !== undefined ? data["identityCode"] : <any>null;
            this.employeeGroupName = data["employeeGroupName"] !== undefined ? data["employeeGroupName"] : <any>null;
        }
    }

    static fromJS(data: any): EmployeeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeGroupID"] = this.employeeGroupID !== undefined ? this.employeeGroupID : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["surename"] = this.surename !== undefined ? this.surename : <any>null;
        data["identityCode"] = this.identityCode !== undefined ? this.identityCode : <any>null;
        data["employeeGroupName"] = this.employeeGroupName !== undefined ? this.employeeGroupName : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEmployeeViewModel extends IViewModel {
    employeeGroupID?: number | null;
    name: string;
    surename: string;
    identityCode?: string | null;
    employeeGroupName?: string | null;
}

export class FindByConditionResponseOfEmployeeViewModel implements IFindByConditionResponseOfEmployeeViewModel {
    itemList?: EmployeeViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfEmployeeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(EmployeeViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfEmployeeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfEmployeeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfEmployeeViewModel {
    itemList?: EmployeeViewModel[] | null;
    collectionSize: number;
}

export class CrudResponse implements ICrudResponse {
    success!: boolean;
    id!: number;

    constructor(data?: ICrudResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"] !== undefined ? data["success"] : <any>null;
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
        }
    }

    static fromJS(data: any): CrudResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CrudResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data; 
    }
}

export interface ICrudResponse {
    success: boolean;
    id: number;
}

export class EmployeeGroupCbxViewModel extends ViewModel implements IEmployeeGroupCbxViewModel {
    name!: string;

    constructor(data?: IEmployeeGroupCbxViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): EmployeeGroupCbxViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeGroupCbxViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEmployeeGroupCbxViewModel extends IViewModel {
    name: string;
}

export class FindByConditionResponseOfEmployeeGroupViewModel implements IFindByConditionResponseOfEmployeeGroupViewModel {
    itemList?: EmployeeGroupViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfEmployeeGroupViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(EmployeeGroupViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfEmployeeGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfEmployeeGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfEmployeeGroupViewModel {
    itemList?: EmployeeGroupViewModel[] | null;
    collectionSize: number;
}

export class EmployeeGroupViewModel extends ViewModel implements IEmployeeGroupViewModel {
    name!: string;
    workingHoursPerWeek!: number;

    constructor(data?: IEmployeeGroupViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.workingHoursPerWeek = data["workingHoursPerWeek"] !== undefined ? data["workingHoursPerWeek"] : <any>null;
        }
    }

    static fromJS(data: any): EmployeeGroupViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeGroupViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["workingHoursPerWeek"] = this.workingHoursPerWeek !== undefined ? this.workingHoursPerWeek : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IEmployeeGroupViewModel extends IViewModel {
    name: string;
    workingHoursPerWeek: number;
}

export class RegisterTimeResponse implements IRegisterTimeResponse {
    responseType!: RegisterTimeResponseType;
    workTime!: string;

    constructor(data?: IRegisterTimeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.responseType = data["responseType"] !== undefined ? data["responseType"] : <any>null;
            this.workTime = data["workTime"] !== undefined ? data["workTime"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseType"] = this.responseType !== undefined ? this.responseType : <any>null;
        data["workTime"] = this.workTime !== undefined ? this.workTime : <any>null;
        return data; 
    }
}

export interface IRegisterTimeResponse {
    responseType: RegisterTimeResponseType;
    workTime: string;
}

export enum RegisterTimeResponseType {
    Success = 0,
    InWork = 1,
    OutWork = 2,
    Error = 3,
}

export class FindByConditionResponseOfRegisterTimeEndpointViewModel implements IFindByConditionResponseOfRegisterTimeEndpointViewModel {
    itemList?: RegisterTimeEndpointViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfRegisterTimeEndpointViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(RegisterTimeEndpointViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfRegisterTimeEndpointViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfRegisterTimeEndpointViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfRegisterTimeEndpointViewModel {
    itemList?: RegisterTimeEndpointViewModel[] | null;
    collectionSize: number;
}

export class RegisterTimeEndpointViewModel extends ViewModel implements IRegisterTimeEndpointViewModel {
    name!: string;
    endpointType!: EndpointType;
    securityToken?: string | null;

    constructor(data?: IRegisterTimeEndpointViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
            this.endpointType = data["endpointType"] !== undefined ? data["endpointType"] : <any>null;
            this.securityToken = data["securityToken"] !== undefined ? data["securityToken"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimeEndpointViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimeEndpointViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["endpointType"] = this.endpointType !== undefined ? this.endpointType : <any>null;
        data["securityToken"] = this.securityToken !== undefined ? this.securityToken : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRegisterTimeEndpointViewModel extends IViewModel {
    name: string;
    endpointType: EndpointType;
    securityToken?: string | null;
}

export enum EndpointType {
    Entrance = 0,
    Exit = 1,
}

export class RegisterTimePerEmployeeViewModel implements IRegisterTimePerEmployeeViewModel {
    summaryWorkTime!: string;
    workDays!: number;
    overTimes!: string;
    workEventDayList?: FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel | null;

    constructor(data?: IRegisterTimePerEmployeeViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.summaryWorkTime = data["summaryWorkTime"] !== undefined ? data["summaryWorkTime"] : <any>null;
            this.workDays = data["workDays"] !== undefined ? data["workDays"] : <any>null;
            this.overTimes = data["overTimes"] !== undefined ? data["overTimes"] : <any>null;
            this.workEventDayList = data["workEventDayList"] ? FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel.fromJS(data["workEventDayList"]) : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimePerEmployeeViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimePerEmployeeViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["summaryWorkTime"] = this.summaryWorkTime !== undefined ? this.summaryWorkTime : <any>null;
        data["workDays"] = this.workDays !== undefined ? this.workDays : <any>null;
        data["overTimes"] = this.overTimes !== undefined ? this.overTimes : <any>null;
        data["workEventDayList"] = this.workEventDayList ? this.workEventDayList.toJSON() : <any>null;
        return data; 
    }
}

export interface IRegisterTimePerEmployeeViewModel {
    summaryWorkTime: string;
    workDays: number;
    overTimes: string;
    workEventDayList?: FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel | null;
}

export class FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel implements IFindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel {
    itemList?: RegisterTimePerEmployeeDayWrapperViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(RegisterTimePerEmployeeDayWrapperViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfRegisterTimePerEmployeeDayWrapperViewModel {
    itemList?: RegisterTimePerEmployeeDayWrapperViewModel[] | null;
    collectionSize: number;
}

export abstract class RegisterTimePerWrapper implements IRegisterTimePerWrapper {
    computedTime!: string;
    overTime!: string;
    nightWork!: boolean;

    constructor(data?: IRegisterTimePerWrapper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.computedTime = data["computedTime"] !== undefined ? data["computedTime"] : <any>null;
            this.overTime = data["overTime"] !== undefined ? data["overTime"] : <any>null;
            this.nightWork = data["nightWork"] !== undefined ? data["nightWork"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimePerWrapper {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'RegisterTimePerWrapper' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["computedTime"] = this.computedTime !== undefined ? this.computedTime : <any>null;
        data["overTime"] = this.overTime !== undefined ? this.overTime : <any>null;
        data["nightWork"] = this.nightWork !== undefined ? this.nightWork : <any>null;
        return data; 
    }
}

export interface IRegisterTimePerWrapper {
    computedTime: string;
    overTime: string;
    nightWork: boolean;
}

export class RegisterTimePerEmployeeDayWrapperViewModel extends RegisterTimePerWrapper implements IRegisterTimePerEmployeeDayWrapperViewModel {
    day!: number;
    workRegisterEvent?: WorkRegisterEventViewModel | null;

    constructor(data?: IRegisterTimePerEmployeeDayWrapperViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.day = data["day"] !== undefined ? data["day"] : <any>null;
            this.workRegisterEvent = data["workRegisterEvent"] ? WorkRegisterEventViewModel.fromJS(data["workRegisterEvent"]) : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimePerEmployeeDayWrapperViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimePerEmployeeDayWrapperViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["day"] = this.day !== undefined ? this.day : <any>null;
        data["workRegisterEvent"] = this.workRegisterEvent ? this.workRegisterEvent.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRegisterTimePerEmployeeDayWrapperViewModel extends IRegisterTimePerWrapper {
    day: number;
    workRegisterEvent?: WorkRegisterEventViewModel | null;
}

export class WorkRegisterEventViewModel extends ViewModel implements IWorkRegisterEventViewModel {
    employeeID!: number;
    dateGoIn!: Date;
    endpointInID!: number;
    endpointInName?: string | null;
    dateGoOut!: Date;
    endpointOutName?: string | null;

    constructor(data?: IWorkRegisterEventViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.employeeID = data["employeeID"] !== undefined ? data["employeeID"] : <any>null;
            this.dateGoIn = data["dateGoIn"] ? new Date(data["dateGoIn"].toString()) : <any>null;
            this.endpointInID = data["endpointInID"] !== undefined ? data["endpointInID"] : <any>null;
            this.endpointInName = data["endpointInName"] !== undefined ? data["endpointInName"] : <any>null;
            this.dateGoOut = data["dateGoOut"] ? new Date(data["dateGoOut"].toString()) : <any>null;
            this.endpointOutName = data["endpointOutName"] !== undefined ? data["endpointOutName"] : <any>null;
        }
    }

    static fromJS(data: any): WorkRegisterEventViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new WorkRegisterEventViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID !== undefined ? this.employeeID : <any>null;
        data["dateGoIn"] = this.dateGoIn ? this.dateGoIn.toISOString() : <any>null;
        data["endpointInID"] = this.endpointInID !== undefined ? this.endpointInID : <any>null;
        data["endpointInName"] = this.endpointInName !== undefined ? this.endpointInName : <any>null;
        data["dateGoOut"] = this.dateGoOut ? this.dateGoOut.toISOString() : <any>null;
        data["endpointOutName"] = this.endpointOutName !== undefined ? this.endpointOutName : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IWorkRegisterEventViewModel extends IViewModel {
    employeeID: number;
    dateGoIn: Date;
    endpointInID: number;
    endpointInName?: string | null;
    dateGoOut: Date;
    endpointOutName?: string | null;
}

export class RegisterTimePerDayViewModel implements IRegisterTimePerDayViewModel {
    workEventDayList?: FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel | null;

    constructor(data?: IRegisterTimePerDayViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.workEventDayList = data["workEventDayList"] ? FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel.fromJS(data["workEventDayList"]) : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimePerDayViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimePerDayViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workEventDayList"] = this.workEventDayList ? this.workEventDayList.toJSON() : <any>null;
        return data; 
    }
}

export interface IRegisterTimePerDayViewModel {
    workEventDayList?: FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel | null;
}

export class FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel implements IFindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel {
    itemList?: RegisterTimePerDayEmployeeWrapperViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(RegisterTimePerDayEmployeeWrapperViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfRegisterTimePerDayEmployeeWrapperViewModel {
    itemList?: RegisterTimePerDayEmployeeWrapperViewModel[] | null;
    collectionSize: number;
}

export class RegisterTimePerDayEmployeeWrapperViewModel extends RegisterTimePerWrapper implements IRegisterTimePerDayEmployeeWrapperViewModel {
    employeeID!: number;
    employeeFullName?: string | null;
    workRegisterEvent?: WorkRegisterEventViewModel | null;

    constructor(data?: IRegisterTimePerDayEmployeeWrapperViewModel) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.employeeID = data["employeeID"] !== undefined ? data["employeeID"] : <any>null;
            this.employeeFullName = data["employeeFullName"] !== undefined ? data["employeeFullName"] : <any>null;
            this.workRegisterEvent = data["workRegisterEvent"] ? WorkRegisterEventViewModel.fromJS(data["workRegisterEvent"]) : <any>null;
        }
    }

    static fromJS(data: any): RegisterTimePerDayEmployeeWrapperViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterTimePerDayEmployeeWrapperViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID !== undefined ? this.employeeID : <any>null;
        data["employeeFullName"] = this.employeeFullName !== undefined ? this.employeeFullName : <any>null;
        data["workRegisterEvent"] = this.workRegisterEvent ? this.workRegisterEvent.toJSON() : <any>null;
        super.toJSON(data);
        return data; 
    }
}

export interface IRegisterTimePerDayEmployeeWrapperViewModel extends IRegisterTimePerWrapper {
    employeeID: number;
    employeeFullName?: string | null;
    workRegisterEvent?: WorkRegisterEventViewModel | null;
}

export class FindByConditionResponseOfWorkRegisterEventViewModel implements IFindByConditionResponseOfWorkRegisterEventViewModel {
    itemList?: WorkRegisterEventViewModel[] | null;
    collectionSize!: number;

    constructor(data?: IFindByConditionResponseOfWorkRegisterEventViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (Array.isArray(data["itemList"])) {
                this.itemList = [] as any;
                for (let item of data["itemList"])
                    this.itemList!.push(WorkRegisterEventViewModel.fromJS(item));
            }
            this.collectionSize = data["collectionSize"] !== undefined ? data["collectionSize"] : <any>null;
        }
    }

    static fromJS(data: any): FindByConditionResponseOfWorkRegisterEventViewModel {
        data = typeof data === 'object' ? data : {};
        let result = new FindByConditionResponseOfWorkRegisterEventViewModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.itemList)) {
            data["itemList"] = [];
            for (let item of this.itemList)
                data["itemList"].push(item.toJSON());
        }
        data["collectionSize"] = this.collectionSize !== undefined ? this.collectionSize : <any>null;
        return data; 
    }
}

export interface IFindByConditionResponseOfWorkRegisterEventViewModel {
    itemList?: WorkRegisterEventViewModel[] | null;
    collectionSize: number;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}